Damerau-Levenshtein Distance UDF for MySQL
Supports upper bounding for fast searching and UTF-8 case
insensitive throught iconv.

Updated 20120328
	by Diego Torres <diego dot torres at gmail.com>
	- Support UTF8 characters, using iconv
	(http://en.wikipedia.org/wiki/Iconv), and
	force case-insensitivenes.
	- Added debuging output to a temporary file
	- Support for x86_64 and 32bits architecture
	- Provided make.sh, documentation and examples

Updated 20090416
	by Sean Collins <sean at lolyco.com>
	- Tomas' bug (damlevlim("h","hello",2) i get 4)
	Adapted from Josh Drew's levenshtein code using pseudo
	code from
	http://en.wikipedia.org/wiki/Damerau–Levenshtein_distance
	- an optimal string alignment algorithm, as opposed to
	'edit distance' as per the notes in the wp article

Adapted 20080827
	by Sean Collins <sean at lolyco.com>

Originally 20031228
	Levenshtein Distance Algorithm implementation as MySQL UDF
   	by Joshua Drew for SpinWeb Net Designs, Inc. on 2003-12-28.

Derived 
	The levenshtein function is derived from the C implementation
   	by Lorenzo Seidenari. More information about the Levenshtein
	Distance Algorithm can be found at http://www.merriampark.com/ld.htm

Redistribute as you wish, but leave this information intact.

Compiling
	Run Make.sh (adjust paths of mysql include files and mysqlclient library)
	No makefile, neither needed.

Loading UDFs in MySQL STEP 1
    Copy compiled udf to plugin dir. To know where exactly, ask MySQL:

	mysql> SHOW VARIABLES LIKE 'plugin_dir';

    and use result directory.

    To modify plugin_dir to point to a custom location:

	my.cnf: plugin_dir = /usr/lib/mysql/plugin

    Don't forget to restart MySQL!!

Loading UDFs in MySQL STEP 2

    Bind the library to an UDF inside MySQL (only do it once, 
    survives MySQL reboot). Depending your MySQL binaries (32 
    or 64 bits), insert the right library.

	mysql> DROP FUNCTION IF EXISTS mysql.damlevlim256u;
	
	mysql> CREATE FUNCTION damlevlim256u RETURNS INT SONAME 'mysqldamlevlim256u32.so';
	
	or

	mysql> CREATE FUNCTION damlevlim256u RETURNS INT SONAME 'mysqldamlevlim256u64.so';

    Check:

	mysql> SELECT * FROM mysql.func;
	+---------------+-----+-------------------------+----------+
	| name          | ret | dl                      | type     |
	+---------------+-----+-------------------------+----------+
	| damlevlim256u |   2 | mysqldamlevlim256u32.so | function |
	+---------------+-----+-------------------------+----------+
	1 row in set (0.00 sec)


Using damlevlim256u

	mysql> select damlevlim256u();
	ERROR: DAMLEVLIM() requires three arguments (string, string, int)

	First string is compared against second string. Compare only the first
	int chars (upper bound).

	mysql> select damlevlim256('coche', 'çóche', 5);
	+--------------------------------------+
	| damlevlim256u('coche', 'çòche', 5) |
	+--------------------------------------+
	|                                    0 |
	+--------------------------------------+
	1 row in set (0.00 sec)

Further reading about MySql, UTF8 and charset encoding
    http://www.oreillynet.com/onlamp/blog/2006/01/turning_mysql_data_in_latin1_t.html

How to search for multibyte characters in a column:
    Use MySql CHAR_LENGTH function to find rows with multi-byte characters:
	mysql> SELECT name FROM users WHERE LENGTH(name) != CHAR_LENGTH(name);

How to search for strange multibyte characters in a column 
    (don't remember source of original tip)
    Use MySql HEX and PHP bin2hex functions

	mysql> SELECT name, HEX(name) FROM users;

    Get the result back into PHP, and run a bin2hex on the string, compare it to MySQL’s hex of that same string
