Damerau-Levenshtein Distance with Limit for MySQL
Updated 20120328
    by Diego Torres <diego dot torres at gmail.com>
    - Support UTF8 characters, using iconv, so comparation
	is case-insensitive.
    - Added debuging output to a temporary file
    - Support for x86_64 and 32bits architecture

    by Sean Collins (sean at lolyco.com) 27Aug2008
    updated 16Apr2009 to fix:
	- Tomas' bug (damlevlim("h","hello",2) i get 4)
	Adapted from Josh Drew's levenshtein code using pseudo
	code from
	http://en.wikipedia.org/wiki/Damerau–Levenshtein_distance
	- an optimal string alignment algorithm, as opposed to
	'edit distance' as per the notes in the wp article

Levenshtein Distance Algorithm implementation as MySQL UDF
    by Joshua Drew for SpinWeb Net Designs, Inc. on 2003-12-28.

Compiling
    Run Make.sh (adjust paths of mysql include files and mysqlclient library)
    No makefile, sorry!

Loading UDFs in MySQL

    Copy compiled udf to plugin dir. 

# SHOW VARIABLES LIKE 'plugin_dir'
# in my.cnf: #plugin_dir = /usr/lib/mysql/plugin

# DROP FUNCTION IF EXISTS mysql.damlevlim256u;
# CREATE FUNCTION damlevlim256u RETURNS INT SONAME 'mysqldamlevlim256u32.so';

Using damlevlim256u

mysql> select damlevlim256('coche', 'çóche', 5);
+--------------------------------------+
| damlevlim256u('coche', 'çòche', 5) |
+--------------------------------------+
|                                    0 |
+--------------------------------------+
1 row in set (0.00 sec)

Redistribute as you wish, but leave this information intact.
    The levenshtein function is derived from the C implementation
    by Lorenzo Seidenari. More information about the Levenshtein
    Distance Algorithm can be found at http://www.merriampark.com/ld.htm

Further reading about MySql, UTF8 and charset encoding
    http://www.oreillynet.com/onlamp/blog/2006/01/turning_mysql_data_in_latin1_t.html

How to search for multibyte characters in a column:
    Use MySql CHAR_LENGTH function to find rows with multi-byte characters:

# SELECT name FROM users WHERE LENGTH(name) != CHAR_LENGTH(name);

How to search for strange multibyte characters in a column 
    (don't remember source of original tip)

    Use MySql HEX and PHP bin2hex functions

# SELECT name, HEX(name) FROM users;

    Get the result back into PHP, and run a bin2hex on the string, compare it to MySQL’s hex of that same string

